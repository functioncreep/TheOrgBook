#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run  --rm --net=host codenvy/che-ip)}
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker and S2I builds.

          You can build individual components as shown below, components that have dependencies will have these dependencies built too.

          Examples:
           - Build the web UI only

            $0 build tob-web
 
           - Build the API server only.
 
            $0 build tob-api

           - Build the Solr Search Engine server only.
       
            $0 build tob-solr

          By default all containers that components comprise of, will be rebuilt.

            $0 build


  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.

          You can pass in a list of containers to start.  
          By default all containers will be started.
          
          The API_URL used by tob-web can also be redirected.

          Examples:
          $0 start
          $0 start tob-solr
          $0 start tob-web
          $0 start tob-web API_URL=http://docker.for.win.localhost:56325/api/v1
          $0 start tob-api

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  rm - Remove project containers and associated volumes.

  registerDids - Register the DIDs for the issuer services.
                 This is intended for development use.

                 Examples:
                 $0 registerDids seed=the_org_book_0000000000000000000
                 - This will register the DID using the provided seed with the locally running von-network instance.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="tob-db tob-wallet-db tob-solr tob-wallet tob-api schema-spy tob-web"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-web() {
  #
  # tob-web
  #
  # The nginx-runtime image is used for the final runtime image.
  # The angular-app image is used to build the artifacts for the angular distribution.
  # The angular-on-nginx image is copy of the nginx-runtime image complete with a copy of the build artifacts.
  #
  echo -e "\nBuilding nginx-runtime image ..."
  docker build \
    -t 'nginx-runtime' \
    -f '../tob-web/openshift/templates/nginx-runtime/Dockerfile' '../tob-web/openshift/templates/nginx-runtime/'
  
  echo -e "\nBuilding angular-app image ..."
  ${S2I_EXE} build \
    -e "NG_BASE_HREF=${WEB_BASE_HREF}" \
    -e "NG_DEPLOY_URL=${WEB_DEPLOY_URL}" \
    -e "TOB_THEME=${TOB_THEME}" \
    '../tob-web' \
    'centos/nodejs-6-centos7:6' \
    'angular-app'

  echo -e "\nBuilding angular-on-nginx image ..."
  docker build \
    -t 'angular-on-nginx' \
    -f '../tob-web/openshift/templates/angular-on-nginx/Dockerfile' '../tob-web/openshift/templates/angular-on-nginx/'
}

build-solr() {
  #
  # tob-solr
  #
  echo -e "\nBuilding solr-base image ..."
  docker build \
    https://github.com/bcgov/openshift-solr.git \
    -t 'solr-base'

  echo -e "\nBuilding solr image ..."
  ${S2I_EXE} build \
    '../tob-solr/cores' \
    'solr-base' \
    'solr'
}

build-db() {
  #
  # tob-db
  #
    # Nothing to build here ...
  echo
}

build-schema-spy() {
  #
  # schema-spy
  #
  echo -e "\nBuilding schema-spy image ..."
  docker build \
    https://github.com/bcgov/SchemaSpy.git \
    -t 'schema-spy'
}

build-api() {
  #
  # tob-api
  #
  echo -e "\nBuilding libindy image ..."
  docker build \
    -t 'libindy' \
    -f '../tob-api/openshift/templates/libindy/Dockerfile' '../tob-api/openshift/templates/libindy/'

  echo -e "\nBuilding python-libindy image ..."
  docker build \
    -t 'python-libindy' \
    -f '../tob-api/openshift/templates/python-libindy/Dockerfile' '../tob-api/openshift/templates/python-libindy/'

  echo -e "\nBuilding django image ..."
  ${S2I_EXE} build \
    '../tob-api' \
    'python-libindy' \
    'django'
}

build-wallet() {
  #
  # tob-wallet
  #
  echo -e "\nBuilding tob-wallet image ..."
  ${S2I_EXE} build \
    '../tob-wallet' \
    'registry.access.redhat.com/rhscl/python-35-rhel7:3.5' \
    'tob-wallet'
}

buildImages() {
  build-web
  build-solr
  build-db
  build-schema-spy
  build-api
  build-wallet
}

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;  
    esac
  done
  
  if [ "$COMMAND" == "start" ] || [ "$COMMAND" == "registerdids" ]; then
    if [ -z "$seed" ]; then
      echo "You must provide a seed parameter. For example: seed=my_seed_000000000000000000000000."
      exit 1
    fi

    if [ ${#seed} -ne 32 ]; then
      echo "The seed parameter must be 32 characters long exactly."
      exit 1
    fi
  fi
  
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-tob}"

  export INDY_WALLET_SEED=${seed}
  export STI_SCRIPTS_PATH=${STI_SCRIPTS_PATH:-/usr/libexec/s2i}
  export RUST_LOG=${RUST_LOG:-debug}
  export RUST_BACKTRACE=${RUST_BACKTRACE:-full}

  # tob-db
  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"

  # schema-spy
  export DATABASE_SERVICE_NAME="tob-db"
  export POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
  export POSTGRESQL_USER=${POSTGRESQL_USER}
  export POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}

  # tob-solr
  export CORE_NAME="the_org_book"

  # tob-wallet
  export WALLET_HTTP_PORT=${WALLET_HTTP_PORT-6000}
  export WALLET_DB_SERVICE_NAME="tob-wallet-db"
  export DATABASE_ENGINE="postgresql"
  export DATABASE_NAME=${POSTGRESQL_DATABASE}
  export DATABASE_USER=${POSTGRESQL_USER}
  export DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  export WALLET_USER_ID=${WALLET_USER_ID:-wall-e}
  export WALLET_USER_PASSWORD=${WALLET_USER_PASSWORD:-pass1234}
  export WALLET_ADMIN_USER_ID=${WALLET_ADMIN_USER_ID:-wall-e-admin}
  export WALLET_ADMIN_PASSWORD=${WALLET_ADMIN_PASSWORD:-pass123456789}

  # tob-api
  export API_HTTP_PORT=${API_HTTP_PORT:-8081}
  export DATABASE_SERVICE_NAME="tob-db"
  export DATABASE_ENGINE="postgresql"
  export DATABASE_NAME=${POSTGRESQL_DATABASE}
  export DATABASE_USER=${POSTGRESQL_USER}
  export DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  export DJANGO_SECRET_KEY=wpn1GZrouOryH2FshRrpVHcEhMfMLtmTWMC2K5Vhx8MAi74H5y
  export DJANGO_DEBUG=True
  export SOLR_SERVICE_NAME="tob-solr"
  export SOLR_CORE_NAME=${CORE_NAME}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}

  # wallet type a command-line parameter (like seed) default to "virtual" if not specified
  export INDY_WALLET_URL=http://tob-wallet:8080/api/v1/
  export INDY_WALLET_TYPE=${wallet}

  if [ "$COMMAND" == "start" ]; then
    if [ -z "$wallet" ]; then
      export INDY_WALLET_TYPE="virtual"
    fi
  fi

  # tob-web
  export TOB_THEME=${TOB_THEME:-gsx}
  export WEB_HTTP_PORT=${WEB_HTTP_PORT:-8080}
  export WEB_BASE_HREF=${WEB_BASE_HREF:-/}
  export WEB_DEPLOY_URL=${WEB_DEPLOY_URL:-/}
  export API_URL=${API_URL-http://tob-api:8080/api/v1/}
  export IpFilterRules='#allow all; deny all;'
  export RealIpFrom='127.0.0.0/16'
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;  
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} |  xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

registerDids() {
  _seeds=${@}
  if [ -z "${_seeds}" ]; then
    echo -e \\n"registerDids; Missing parameter!"\\n
    exit 1
  fi

  for _seed in ${_seeds}; do
    registerDid ${_seed}
  done
}

registerDid() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"registerDid; Missing parameter!"\\n
    exit 1
  fi
  _seedJson=$(getSeedJson ${_seed})
  _ledgerUri=$(getLedgerRegistrationUrl)

  echo -e \\n"Registering ${_seed} with the ledger ..."
  curl -X POST \
    ${_ledgerUri} \
    -H 'content-type: application/json' \
    -d "${_seedJson}"
}

getSeedJson() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"getSeedJson; Missing parameter!"\\n
    exit 1
  fi

  echo "{\"seed\": \"${_seed}\"}"
}

generateSeeds() {
  echo ${INDY_WALLET_SEED}
}

getLedgerRegistrationUrl() {
  if [[ ("${LEDGER_URL}" == "http://${DOCKERHOST}:9000") && ("${DOCKERHOST}" != "localhost") ]]; then
    _ledgerUrl="http://localhost:9000"  
  else
    _ledgerUrl="${LEDGER_URL}"
  fi

  echo "${_ledgerUrl}/register"
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "${COMMAND}" in
  start)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up ${_startupParams}
    ;;
  stop)
    configureEnvironment
    docker-compose stop
    ;;
  rm)
    configureEnvironment
    deleteVolumes
    ;;
  registerdids)
      configureEnvironment $@
      registerDids $(generateSeeds)
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    case "$@" in
      tob-api)
        build-api
        ;;
      tob-wallet)
        build-wallet
        ;;
      tob-web)
        build-web
        ;;
      tob-solr)
        build-solr
        ;;
      *)
       buildImages
    esac
    ;;
  *)
    usage
esac

popd >/dev/null
